CREATE DATABASE target_db;
USE target_db;

-- 1. List all unique cities where customers are located. --
SELECT DISTINCT
    customer_city
FROM
    customers;

-- 2. Count the number of orders placed in 2017. --
SELECT 
    COUNT(order_id)
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = '2017';
    
 
-- 3. Find the total sales per category. -- 
SELECT 
    UCASE(product_category), ROUND(SUM(payment_value), 2) AS total_sale
FROM
    products
        JOIN
    order_items ON order_items.product_id = products.product_id
        JOIN
    payments ON payments.order_id = order_items.order_id
GROUP BY product_category
ORDER BY total_sale DESC;



-- 4. Calculate the percentage of orders that were paid in installments. -- 
SELECT CONCAT((SUM(CASE 
				WHEN payment_installments >= 1 THEN 1 
				ELSE 0
			End)/ COUNT(*) * 100),'%') AS orders_installments_
FROM payments;



-- 5. Count the number of customers from each state. --
SELECT customer_state, COUNT(customer_id)
FROM customers
GROUP BY customer_state;



-- 6. Calculate the number of orders per month in 2018. -- 
SELECT 
    MONTHNAME(order_purchase_timestamp) AS Month_2018,
    COUNT(order_id) AS Total_Order
FROM
    orders
WHERE
    YEAR(orders.order_purchase_timestamp) = 2018
GROUP BY MONTH(order_purchase_timestamp) , Month_2018
ORDER BY MONTH(order_purchase_timestamp);



-- 7. Find the average number of products per order, grouped by customer city --
WITH
count_per_order
AS
(	SELECT orders.order_id, 
		orders.customer_id,
        COUNT(order_items.order_id) as oc
	FROM orders
		JOIN order_items
		ON orders.order_id = order_items.order_id
	GROUP BY order_id, customer_id)
SELECT customers.customer_city,
	   ROUND(AVG(count_per_order.oc),2) AS avg_products_per_orders
FROM customers
			JOIN count_per_order
			ON customers.customer_id = count_per_order.customer_id
GROUP BY customers.customer_city
ORDER BY avg_products_per_orders DESC;









-- 8. Calculate the percentage of total revenue contributed by each product category. --
SELECT 
    UCASE(product_category) AS category,
    ROUND((SUM(payment_value) / (SELECT 
                    SUM(payment_value)
                FROM
                    payments) * 100),
            2) AS sale_contribution
FROM
    products
        JOIN
    order_items ON order_items.product_id = products.product_id
        JOIN
    payments ON payments.order_id = order_items.order_id
GROUP BY product_category
ORDER BY sale_contribution DESC;



-- 9. Identify the correlation between product price and the number of times a product has been purchased. --
SELECT 
    UCASE(product_category),
    COUNT(order_items.product_id) AS product_pruchased,
    ROUND(AVG(order_items.price), 2) AS avg_price
FROM
    products
        JOIN
    order_items ON order_items.product_id = products.product_id
GROUP BY product_category
ORDER BY avg_price DESC;



-- 10. Calculate the total revenue generated by each seller, and rank them by revenue. --
SELECT 
		RANK() OVER(ORDER BY total_sales DESC) AS RNK, 
        sellers, 
        total_sales
FROM
	(SELECT order_items.seller_id AS sellers, 
			ROUND(SUM(payments.payment_value),2) AS total_sales
		FROM order_items
		JOIN 
			payments 
				ON order_items.order_id = payments.order_id
		GROUP BY order_items.seller_id) AS a;




-- 11. Calculate the moving average of order values for each customer over their order history. --
SELECT 
		customer_id, 
        order_purchase_timestamp, 
        payment, 
        AVG(payment) OVER(PARTITION BY customer_id ORDER BY order_purchase_timestamp
		ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS mov_avg
FROM
			(SELECT 
					orders.customer_id, 
                    orders.order_purchase_timestamp, 
                    payments.payment_value AS payment
			FROM payments JOIN orders
			ON payments.order_id = orders.order_id) AS a;



-- 12. Calculate the cumulative sales per month for each year. --
SELECT years, 
	   months,
	   sales AS monthly_sales, 
	   ROUND(SUM(sales) OVER(ORDER BY years, months),2) AS cumulative_sales
FROM
		(SELECT 
				YEAR(order_purchase_timestamp) AS years, 
				MONTH(order_purchase_timestamp) AS months, 
				ROUND(SUM(payment_value),2) AS sales
		FROM orders JOIN payments
					ON orders.order_id = payments.order_id
		GROUP BY  
				 YEAR(order_purchase_timestamp), 
				 MONTH(order_purchase_timestamp)
		ORDER BY 
				YEAR(order_purchase_timestamp), 
				MONTH(order_purchase_timestamp)) AS A;




-- 13. Calculate the year-over-year growth rate of total sales. --
With yearly_sales
as
	(SELECT 
			YEAR(order_purchase_timestamp) AS years, 
            ROUND(SUM(payment_value),2) AS revenue
	FROM orders JOIN payments
			ON orders.order_id = payments.order_id
	GROUP BY years
	ORDER BY years)

SELECT 	years,
		revenue, 
        IFNULL(LAG(revenue) OVER(ORDER BY years),'-') AS previous_year, 
        CONCAT(IFNULL(ROUND((revenue - LAG(revenue) OVER (ORDER BY years))
				/ LAG(revenue) OVER(ORDER BY years) * 100,2),0),'%') AS yoy_growth_percentage
FROM yearly_sales;



-- 14. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase. --
WITH first_purchase AS (
    
    SELECT 
        customer_id, 
        MIN(order_purchase_timestamp) AS first_purchase_date
    FROM 
        orders
    GROUP BY 
        customer_id
),
retained_customers AS (
    
    SELECT 
        f.customer_id,
        CASE 
            WHEN COUNT(o.order_id) > 1 THEN 1  
            ELSE 0
        END AS is_retained
    FROM 
        first_purchase f
    LEFT JOIN 
        orders o 
    ON 
        f.customer_id = o.customer_id
        AND o.order_purchase_timestamp > f.first_purchase_date
        AND o.order_purchase_timestamp <= DATE_ADD(f.first_purchase_date, INTERVAL 6 MONTH)
    GROUP BY 
        f.customer_id
)

SELECT 
    COUNT(CASE WHEN is_retained = 1 THEN 1 END) AS retained_customers,
    COUNT(*) AS total_customers,
    ROUND(COUNT(CASE WHEN is_retained = 1 THEN 1 END) * 100.0 / COUNT(*), 2) AS retention_rate_percentage
FROM 
    retained_customers;



-- 15. Identify the top 3 customers who spent the most money in each year. --
WITH a 
AS
(SELECT 
		RANK() OVER(PARTITION BY year ORDER BY total_spent DESC) AS RNK,
		year,
        customer_id,
        total_spent
FROM
		(SELECT 
				YEAR(orders.order_purchase_timestamp) AS year, 
				orders.customer_id, 
				ROUND(SUM(payments.payment_value),2) AS total_spent
		FROM orders JOIN payments
					ON orders.order_id = payments.order_id
		GROUP BY year, orders.customer_id
		ORDER BY year, total_spent DESC) AS a
)
SELECT year,
        customer_id,
        total_spent
FROM a
WHERE RNK < 4;













